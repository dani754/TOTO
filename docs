AdminPage class

props from Home.js:
leagueID = {this.state.isAdmin}

initial state:
leagueID: 0,        // fetch fullLeagueData
leagueName: '',     // fetch fullLeagueData
cyclesIDs: [],      // fetch fullLeagueData
membersIDs: [],     // fetch fullLeagueData
names_array: [],    // fetch fullLeagueData
scores_array: [],   // fetch fullLeagueData
current_cycle: 0,   // fetch fullLeagueData
scoring_method: 1,  // fetch fullLeagueData
cyclesDB: 0,        // fetch fullLeagueData
showCycle: 0,       //switchTab()
table: 0,           //switchTab()
toast: <p></p>,     //switchTab()

import components:
AdminNav     //
CyclesUpdate //
LeagueData   //
AddCycle     //
CloseCycle   //
LockCycle    //

functions:
addCycle     // 
closeCycle    // 
lockCycle     //
fullLeagueData(url) 
switchTab(eventKey) // activates fullLeagueData

render:

//setState leagueID=0 to refresh data from server:
if props leagueID !== 0 & this.state.leagueID === 0 
    fetch fullLeagueData(props leagueID) from server

//use switchTab() to update main content:
let Content = this.state.table;
if Content === 0 && this.state.leagueID !== 0  // initial content
    this.switchTab(this.state.current_cycle)   // stored in server, update in LeagueData

//pop-up messages       
let toast = this.state.toast;

//sends to navbar data on current shown cycle from state.cyclesDB
let cyclesArray = this.state.cyclesDB;
let cycleData = 0;
if Array.isArray(cyclesArray) && this.state.showCycle > 0 //make sure the data is already fetched from server
    cycleData = cyclesArray.find( cycle => cycle.cycleid === parseInt(this.state.showCycle))

AdminNav function

props from AdminPage.js:
onSelect={(eventKey)=>{this.switchTab(eventKey)}} //change content in AdminPage
cycles={this.state.cyclesIDs}                     //for cycles list
cycleID = {this.state.showCycle}                  //for costumize buttons
cycleData = {cycleData}                           //for costumize buttons

//cycles list - switch cycle button
let allCycles = props.cycles;
allCycles.sort(function(a, b){return b-a}); //sort from last to first

//when leagueData page is displayed - showenCycle == 0

//costumize buttons
let cycleCostumizeActions = <Nav.Link  eventKey="lock cycle" > נעילת מחזור </Nav.Link> //default - when cycle is unlocked
if (props.cycleData.islocked){
    if (props.cycleData.isclosed){
        cycleActions = <Nav.Link  eventKey="lock cycle" > ביטול סגירת מחזור </Nav.Link>
    } else { //if locked but not closed
        cycleActions = <Nav.Link  eventKey="lock cycle" > סגירת מחזור </Nav.Link>
                     & <Nav.Link  eventKey="lock cycle" > ביטול נעילת מחזור </Nav.Link>
    }
} 

events:
cycleID (switch cycle) //
addCycle  //
lock  //
unlock  //
close  //
unclose   //
LeagueData   //

CycleUpdate class

props from AdminPage.js:
data={this.state}
cycleID={parseInt(eventKey)}
onSubmit={()=> this.setState({leagueID: 0})} 
onSelect={(eventKey)=>{this.switchTab(eventKey)}}

initial state:
cycleID: 0,             //fetch cycleData
gamesIDs: [],           //fetch cycleData
cycleOrderInLeague: 0,  //fetch cycleData
isLocked: true,         //fetch cycleData
isClosed: true,         //fetch cycleData
membersScores: [],      //fetch cycleData
gamesDB: [],            //fetch cycleData
table: [{gameid: 1, hometeam: 'await', awayteam: 'await', score: 'await', cycleid: 0}],  //setTable
gamesToAdd: 0,          //handleGamesInput
hometeam: [''],         //handleGamesInput
awayteam: [''],        //handleGamesInput

functions:
cycleData //fetch from server
setTable  //set games table
handleGamesInput //captures games input for addition when cycle is not locked
addGame  //update games add when cycle is not locked
deleteGame //update games delete when cycle is not locked
handleChange  //captures games score input when cycle is locked
updateScores  //update scores when cycle is locked

render:

//when state.cycleID == 0 - update cycle data from server:
//(without changing AdminPage data!)
if this.state.cycleID !== props.cycleID
    fetch cycleData(this.props.cycleID)

//when cycle is locked - shows games list:
let tableArray = this.state.table;
//if this is a valid cycleID and the first game in table array doesnt belong to this cycle
//refresh by changing the first game cycleID to 0 (update cycle data first?)
if (tableArray[0].cycleid !== this.state.cycleID && this.state.cycleID !== 0){
    this.setTable();
}

//if isclosed - only shows list of games and scores
//if islocked (and not closed) - shows game list and update scores
//if unlocked and has games in DB - shows games list with option to delete or add more games + bonus checkbox
//if no games in cycle - add games
