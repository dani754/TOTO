AdminPage class

props from Home.js:
leagueID = {this.state.isAdmin}

initial state:
leagueID: 0,        // fetch fullLeagueData
leagueName: '',     // fetch fullLeagueData
cyclesIDs: [],      // fetch fullLeagueData
membersIDs: [],     // fetch fullLeagueData
names_array: [],    // fetch fullLeagueData
scores_array: [],   // fetch fullLeagueData
current_cycle: 0,   // fetch fullLeagueData
scoring_method: 1,  // fetch fullLeagueData
cyclesDB: 0,        // fetch fullLeagueData
showCycle: 0,       //switchTab()
table: 0,           //switchTab()
toast: <p></p>,     //switchTab()

import components:
AdminNav     //
CyclesUpdate //
LeagueData   //
AddCycle     //
CloseCycle   //
LockCycle    //

functions:
addCycle     // 
closeCycle    // 
lockCycle     //
fullLeagueData(url) 
switchTab(eventKey) // activates fullLeagueData

render:

//setState leagueID=0 to refresh data from server:
if props leagueID !== 0 & this.state.leagueID === 0 
    fetch fullLeagueData(props leagueID) from server

//use switchTab() to update main content:
let Content = this.state.table;
if Content === 0 && this.state.leagueID !== 0  // initial content
    this.switchTab(this.state.current_cycle)   // stored in server, update in LeagueData

//pop-up messages       
let toast = this.state.toast;

//sends to navbar data on current shown cycle from state.cyclesDB
let cyclesArray = this.state.cyclesDB;
let cycleData = 0;
if Array.isArray(cyclesArray) && this.state.showCycle > 0 //make sure the data is already fetched from server
    cycleData = cyclesArray.find( cycle => cycle.cycleid === parseInt(this.state.showCycle))

AdminNav function

props from AdminPage.js:
onSelect={(eventKey)=>{this.switchTab(eventKey)}} //change content in AdminPage
cycles={this.state.cyclesIDs}                     //for cycles list
cycleID = {this.state.showCycle}                  //for costumize buttons
cycleData = {cycleData}                           //for costumize buttons

//cycles list - switch cycle button
let allCycles = props.cycles;
allCycles.sort(function(a, b){return b-a}); //sort from last to first

//when leagueData page is displayed - showenCycle == 0

//costumize buttons
let cycleCostumizeActions = <Nav.Link  eventKey="lock cycle" > נעילת מחזור </Nav.Link> //default - when cycle is unlocked
if (props.cycleData.islocked){
    if (props.cycleData.isclosed){
        cycleActions = <Nav.Link  eventKey="lock cycle" > ביטול סגירת מחזור </Nav.Link>
    } else { //if locked but not closed
        cycleActions = <Nav.Link  eventKey="lock cycle" > סגירת מחזור </Nav.Link>
                     & <Nav.Link  eventKey="lock cycle" > ביטול נעילת מחזור </Nav.Link>
    }
} 

events:
cycleID (switch cycle) //
addCycle  //
lock  //
unlock  //
close  //
unclose   //
addCycle   //
LeagueData   //

from switchtab function in admin page:
case "LeagueData":
this.setState({showCycle: 0});
returnedTable = <LeagueData data={this.state} onDataChange={()=>this.setState({leagueID:0})} />;
break;
case "addCycle":
this.setState({toast: <AddCycle  show={true} /> });
this.addCycle(this.state.leagueID);
returnedTable = <LeagueData data={this.state} />;
break; 
case "close":
this.setState({toast: <CloseCycle show={true} /> });
this.closeCycle(this.state.showCycle);
returnedTable = <LeagueData data={this.state} />;
break;
case "lock":
this.setState({toast: <LockCycle show={true} /> });
this.lockCycle(this.state.showCycle);
returnedTable = <LeagueData data={this.state} />;
break;
default: {
this.setState({showCycle: eventKey});
returnedTable = <CyclesUpdate data={this.state} cycleID={parseInt(eventKey)}
onSubmit={()=> this.setState({leagueID: 0})} 
onSelect={(eventKey)=>{this.switchTab(eventKey)}}
/>
this.setState({table: returnedTable});